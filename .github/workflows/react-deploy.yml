name: Deploy to AWS

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    concurrency: 
      group: production
      cancel-in-progress: true

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Extract Commit Hash
      id: commit
      run: |
        COMMIT_HASH=$(git rev-parse --short HEAD)
        echo "Commit hash: $COMMIT_HASH"
        echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2
      with:
        region: ${{ secrets.AWS_REGION }}

    - name: Build and push Docker image
      run: |
            IMAGE_TAG=${{ steps.commit.outputs.commit_hash }}
            ECR_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/bjj-tracker-react

            echo "VITE_REACT_APP_API_BASE_URL=${VITE_REACT_APP_API_BASE_URL}" > .env.production

            # Build with commit hash tag
            docker build -t bjj-tracker-react:$IMAGE_TAG .
            
            # Tag with commit hash
            docker tag bjj-tracker-react:$IMAGE_TAG $ECR_URI:$IMAGE_TAG
            # Tag as latest
            docker tag bjj-tracker-react:$IMAGE_TAG $ECR_URI:latest
            # Tag with branch name (assuming main branch)
            docker tag bjj-tracker-react:$IMAGE_TAG $ECR_URI:main
            
            # Push all tags
            docker push $ECR_URI:$IMAGE_TAG
            docker push $ECR_URI:latest
            docker push $ECR_URI:main
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        VITE_REACT_APP_API_BASE_URL: ${{ secrets.VITE_REACT_APP_API_BASE_URL }}

    - name: Replace Placeholders in Task Definition
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        VERSION: ${{ steps.commit.outputs.commit_hash }}
      run: |
        envsubst < aws/react-task-template.json > aws/react-task.json
        echo "Version: $VERSION"

    - name: Register Task Definition
      id: register-task-def
      run: |
        TASK_DEF=$(aws ecs register-task-definition \
          --cli-input-json file://aws/react-task.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        echo "TASK_DEF=$TASK_DEF" >> $GITHUB_OUTPUT

    - name: Update ECS Service
      run: |
        aws ecs update-service \
          --cluster bjj-tracker-cluster \
          --service bjj-tracker-react-service \
          --task-definition ${{ steps.register-task-def.outputs.TASK_DEF }} \
          --force-new-deployment

    - name: Verify Deployment
      run: |
        aws ecs wait services-stable \
          --cluster bjj-tracker-cluster \
          --services bjj-tracker-react-service

    - name: Cleanup Old Images
      if: success()
      run: |
        REPO_NAME="bjj-tracker-react"
        # Keep more recent images (last 10)
        aws ecr describe-images \
          --repository-name $REPO_NAME \
          --query 'imageDetails[?type(imageTag)!=`null`].[imageDigest]' \
          --output text | \
        sort -r | \
        tail -n +11 | \
        xargs -I {} aws ecr batch-delete-image \
          --repository-name $REPO_NAME \
          --image-ids imageDigest={}